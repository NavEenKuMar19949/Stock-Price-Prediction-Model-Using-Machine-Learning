# -*- coding: utf-8 -*-
"""STLM_NVDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W-CKrp7fOgkHmddkktbNAdohHtyl0v8G
"""

#Created by Naveen Kumar
#Import Libraries

import math
import pandas_datareader as web
import json
import re
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
!pip install --upgrade pandas-datareader
!pip install yfinance
import yfinance as yf

try:
    # Get data from Yahoo Finance using yfinance
    df = yf.download('NVDA', start='2014-04-08', end='2024-04-08')
    # Look at the data
    print(df)
except Exception as e:
    print("Error occurred:", e)

#Count the number of rows and columns
df.shape

#visualize the closing price history
plt.figure(figsize=(20,6))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close price USD ($)', fontsize=18)
plt.show()

#filter and create new data frame with only Close Column
data = df.filter(['Close'])
#convert the dataframe to a data array
dataset = data.values
#get the number of rows to train the model on
training_data_len = math.ceil( len(dataset) * .8)

print(training_data_len)

#scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
print(scaled_data)

#create the training data set
#create the scaled training data set
train_data = scaled_data[0:training_data_len , :]
#split the data into x_train and y_train data sets
x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()

#convert the x_train and y_train to numpy arrays
x_train, y_train = np.array(x_train), np.array(y_train)

#reshape the data
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#build the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape= (x_train.shape[1],1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

#train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)

#create the testing data set
#create a new array containing scaled values from index 140 to 250
test_data = scaled_data[training_data_len - 60: , :]
#create the dataset x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i,0])

#convert the data to a numpy array
x_test = np.array(x_test)

#reshapde the data
x_data = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

#get the models predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

#get the root mean squared error (RSME)
rmse = np.sqrt( np.mean((( predictions - y_test )**2)))
print(rmse)

#plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#visualize the data
plt.figure(figsize=(16,8))
plt.title('MOdel')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
print(plt.show())

#show the valid and predicted prices
print(valid)

##get the quote

# Get data from Yahoo Finance using yfinance
nvda_quote = yf.download('NVDA', start='2014-01-01', end='2024-01-01')
#create a new dataframe
new_df = nvda_quote.filter(['Close'])
#get the last 60 days closing price values and convert the data frame to an array
last_60_days = new_df[-60:].values
#scale the data to be values between 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)
#create an empty list
X_test = []
#append the last 60 days
X_test.append(last_60_days_scaled)
#convert the X_test data set to a numpy array
X_test = np.array(X_test)
#reshape the data
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
#get the predicted sclaed price
pred_price = model.predict(X_test)
#undo the scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

#get second quote
nvda_quote2 = yf.download('NVDA', start='2024-04-02', end='2024-04-03')
print(nvda_quote2)